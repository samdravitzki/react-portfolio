{"version":3,"sources":["components/CoolBackGround/CoolBackGround.js","components/HomeTitle/HomeTitle.js","components/ContentContainer.js","components/HomeView/HomeView.js","App.js","serviceWorker.js","index.js"],"names":["CoolBackGround","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","style","backgroundColor","props","bgColor","color","textColor","generateSlashes","map","slash","Component","slashCount","output","i","randomNumber","Math","random","push","HomeTitle","fname","lname","ContentContainer","containerLayoutStyle","class","flexRow","flexItem","components_HomeTitle_HomeTitle","width","display","flexDirection","alignContent","height","margin","alignItems","justifyContent","flexBasis","HomeView","components_CoolBackGround_CoolBackGround","containerWrapperStyle","components_ContentContainer","maxWidth","padding","outline","outlineOffset","outlineRadius","App","components_HomeView_HomeView","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7a67aa8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './CoolBackGround.css'\r\n\r\nexport class CoolBackGround extends Component {\r\n  render() {\r\n    return (\r\n      // <div className=\"CoolBackGround\" style={{backgroundColor: this.props.bgColor, color: this.props.textColor}}>\r\n      //   <span class=\"pattern\"> {generateBackground(999)} </span>\r\n      // </div>\r\n      \r\n      <div className=\"CoolBackGround\" style={{backgroundColor: this.props.bgColor, color: this.props.textColor}}>\r\n        <div className=\"grid-container\"> \r\n          {generateSlashes(1000).map(slash => (\r\n            <div className=\"grid-cell\">{slash}</div>\r\n          ))} \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// REFACTOR to use array methods\r\nconst generateSlashes = (slashCount) => {\r\n  const fslash = '⋰';\r\n  const bslash = '⧅';\r\n  \r\n  let output = [];\r\n\r\n  for(let i = 0; i < slashCount; i++){\r\n    let randomNumber = Math.random();\r\n\r\n    output.push(randomNumber < 0.7 ? fslash : bslash);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport default CoolBackGround\r\n","import React, { Component } from 'react'\r\nimport './HomeTitle.css'\r\n\r\nexport class HomeTitle extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"HomeTitle\">\r\n        <span className=\"Name\">{fname}</span> <br></br>\r\n        <span className=\"Name\">{lname}</span><br></br>\r\n        {/* <span className=\"Blurb\">{blurb}</span> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst fname = \"⧅ Sam\";\r\nconst lname = \"Dravitzki\";\r\n// const blurb = \"Just a dude\"\r\n\r\nexport default HomeTitle\r\n","import React from 'react'\r\nimport HomeTitle from './HomeTitle/HomeTitle.js';\r\n// import HomeDetail from './HomeDetail.js';\r\n\r\n// This container will position all of the contents of this page inside a flexbox\r\n/**\r\n * This will include a title, logos, blurb and links to relevant accounts.\r\n * \r\n * I am only building the portfolio for what I have done, which at the moment is nothing.\r\n */\r\nfunction ContentContainer() {\r\n  return (\r\n    <div style={containerLayoutStyle}>\r\n      <div class=\"row\" style={flexRow}>\r\n        <div class=\"item\" style={flexItem}>\r\n        </div>\r\n        <div class=\"item\" style={flexItem}>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\" style={flexRow}>\r\n        <div class=\"item\" style={flexItem}>\r\n          <HomeTitle />\r\n        </div>\r\n        <div class=\"item\" style={flexItem}>\r\n          {/* <HomeDetail /> */}\r\n        </div>\r\n      </div>\r\n      <div class=\"row\" style={flexRow}>\r\n        <div class=\"item\" style={flexItem}> \r\n        </div>\r\n        <div class=\"item\" style={flexItem}>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  )\r\n} \r\nexport default ContentContainer;\r\n\r\nconst containerLayoutStyle = {\r\n  width: '100%',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignContent: 'stretch'\r\n}\r\n\r\nconst flexRow = {\r\n  width: '100%',\r\n  height: '33.3%',\r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  alignContent: 'stretch'\r\n  \r\n}\r\n\r\nconst flexItem = {\r\n  display: 'flex',\r\n  margin: '10px',\r\n  alignContent: 'stretch',\r\n  alignItems: 'stretch',\r\n  flexDirection: 'row',\r\n  justifyContent: 'flex-end',\r\n  flexBasis: '50%'\r\n}","import React, { Component } from 'react'\r\nimport './HomeView.css'\r\nimport CoolBackGround from '../CoolBackGround/CoolBackGround';\r\nimport ContentContainer from '../ContentContainer.js';\r\n\r\nexport class HomeView extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"HomeView\">\r\n          {/* <Navbar/> */}\r\n          <CoolBackGround bgColor='#282c34' textColor='#414652' />\r\n          <div style={containerWrapperStyle}>\r\n            <ContentContainer />\r\n          </div>\r\n\r\n          \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst containerWrapperStyle = {\r\n  display: 'flex',\r\n  maxWidth: '100%',\r\n  width: '100vw',\r\n  height: '100vh',\r\n  padding: '6vh 5vw 6vh 5vw',\r\n  outline: '25px solid #fff',\r\n  outlineOffset: '-3vw',\r\n  outlineRadius: '10%'\r\n\r\n}\r\n\r\nexport default HomeView\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport HomeView from \"./components/HomeView/HomeView.js\"\r\n// import EducationView from \"./components/EducationView/EducationView.js\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <HomeView />\r\n        {/* <EducationView /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}